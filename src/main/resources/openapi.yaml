openapi: 3.0.1
info:
  title: DaSSCo
  description: |
    DaSSCO API Documentation
  version: "1.0"
servers:
- url: "${apiServerUrl}"
  variables: {}
paths:
  /v1/assets:
    get:
      operationId: getAssets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetV1'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assets/internalstatus/{timeframe}:
    get:
      operationId: getInternalStatusAmt
      parameters:
      - name: timeframe
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}/assetreceived:
    post:
      operationId: assetreceived
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AssetUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}/audit:
    post:
      operationId: auditAsset
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Audit'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}/complete:
    post:
      operationId: completeAsset
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AssetUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata:
    post:
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}:
    get:
      operationId: getAsset
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    put:
      operationId: updateAsset
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}/events:
    get:
      operationId: getEvents
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}/seterrorstatus:
    put:
      operationId: setErrorStatus
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      - name: newStatus
        in: query
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/assetmetadata/{assetGuid}/unlock:
    put:
      operationId: unlockAsset
      parameters:
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/collections:
    get:
      operationId: getInstitutes
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      operationId: deleteCollection
      responses:
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions:
    get:
      operationId: getInstitutes_1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}:
    get:
      operationId: getInstitutes_2
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/pipelines:
    get:
      operationId: getPipelines
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution_2
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/publishers/{publisherName}:
    get:
      operationId: list
      parameters:
      - name: publisherName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/publishers/{publisherName}/publish:
    post:
      operationId: publish
      parameters:
      - name: publisherName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationLink'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/publishers/{publisherName}/pull:
    post:
      operationId: pull
      parameters:
      - name: publisherName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicationLink'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/shares/reopen:
    post:
      operationId: checkoutAsset
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AssetSmbRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SambaInfo'
      security:
      - dassco-idp: []
  /v1/shares/close:
    post:
      operationId: closeSmb
      parameters:
      - name: syncERDA
        in: query
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdateRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SambaInfo'
      security:
      - dassco-idp: []
  /v1/shares/open:
    post:
      operationId: openSmb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmbRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SambaInfo'
      security:
      - dassco-idp: []
  /v1/shares/disconnect:
    post:
      operationId: pauseSmb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetSmbRequest'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SambaInfo'
      security:
      - dassco-idp: []
  /v1/collections/{collectionName}/specimens:
    get:
      operationId: getSpecimen
      parameters:
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Specimen'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createSpecimen
      parameters:
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Specimen'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specimen'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      operationId: deleteSpecimen
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Specimen'
      responses:
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/graphdata/custom:
    get:
      operationId: getGraphDataCustomTimeframe
      parameters:
      - name: view
        in: query
        schema:
          type: string
      - name: start
        in: query
        schema:
          type: integer
          format: int64
      - name: end
        in: query
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/graphdata/{timeframe}:
    get:
      operationId: getGraphDataDaily
      parameters:
      - name: timeframe
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphData'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/graphdata:
    get:
      operationId: getSpecimenData
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsData'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/workstations:
    get:
      operationId: getWorkstations
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createWorkstation
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workstation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/workstations/{workstationName}:
    put:
      operationId: updateWorkstation
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workstation'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
      security:
      - dassco-idp: []
components:
  schemas:
    AssetV1:
      type: object
      properties:
        originalMedia:
          type: string
        originalMediaTaken:
          type: string
          format: date-time
        digitiser:
          type: string
        workstationName:
          type: string
        pipelineName:
          type: string
        institution:
          type: string
        collection:
          type: string
        dateMediaCreated:
          type: string
          format: date-time
        mediaCreatedBy:
          type: string
        dateMediaUpdated:
          type: array
          items:
            type: string
            format: date-time
        mediaUpdatedBy:
          type: array
          items:
            type: string
        dateMediaDeleted:
          type: string
        mediaDeletedBy:
          type: string
        dateMetadataCreated:
          type: string
          format: date-time
        metadataCreatedBy:
          type: array
          items:
            type: string
        dateMetadataUpdated:
          type: array
          items:
            type: string
            format: date-time
        metadataUpdatedBy:
          type: array
          items:
            type: string
        audited:
          type: string
        auditedBy:
          type: string
        auditedDate:
          type: string
          format: date-time
        status:
          type: string
        storageLocation:
          type: string
        parent:
          type: string
        originalParent:
          type: string
        relatedMedia:
          type: string
        mutispecimenStatus:
          type: string
        otherMultispecimen:
          type: string
        barcode:
          type: string
        specimenPid:
          type: string
        specifySpecimenId:
          type: string
        specifyAttachmentId:
          type: string
        mediaGuid:
          type: string
        mediaPid:
          type: string
        externalLink:
          type: string
        payloadType:
          type: string
        fileFormat:
          type: string
        fileInfo:
          type: string
        accessLevel:
          type: string
        preparationType:
          type: string
        ocrText:
          type: string
        geographicRegion:
          type: string
        taxonName:
          type: string
        typeStatus:
          type: string
        specimenStorageLocation:
          type: string
        funding:
          type: string
        copyrightOwner:
          type: string
        license:
          type: string
        embargoType:
          type: string
        embargoNotes:
          type: string
        equipmentDetails:
          type: array
          items:
            type: string
        exposureTime:
          type: string
        fNumber:
          type: string
        focalLength:
          type: string
        isoSetting:
          type: string
        whiteBalance:
          type: string
        originalSpecifyMediaName:
          type: string
        mediaSubject:
          type: string
        notes:
          type: array
          items:
            type: string
        pushAssetToSpecify:
          type: string
        pushMetadataToSpecify:
          type: string
    DaSSCoError:
      type: object
      properties:
        type:
          type: string
          enum:
          - Error
        protocolVersion:
          type: string
          enum:
          - "1.0"
        errorCode:
          type: string
          enum:
          - BAD_REQUEST
          - UPSTREAM_ERROR
          - INTERNAL_ERROR
          - FORBIDDEN
        errorMessage:
          type: string
    Asset:
      type: object
      properties:
        asset_pid:
          type: string
          description: Pid
          example: asdf-1234-3333-1000
        asset_guid:
          type: string
          description: Unique key for the asset?
          example: ti-a01-202305241657
        status:
          type: string
          description: The status of the asset
          example: BEING_PROCESSED
          enum:
          - WORKING_COPY
          - ARCHIVE
          - BEING_PROCESSED
          - PROCESSING_HALTED
          - ISSUE_WITH_MEDIA
          - ISSUE_WITH_METADATA
          - FOR_DELETION
        multi_specimen:
          type: boolean
          description: Basically a multispecimen is a single image (or other type
            of media) that actually contains multiple specimens in it
          example: false
        specimens:
          type: array
          description: The barcodes of associated specimens
          example: "'[\"ti-sp-00012\"']"
          items:
            $ref: '#/components/schemas/Specimen'
        funding:
          type: string
          description: A short description of funding source used to create the asset
          example: Hundredetusindvis af dollars
        subject:
          type: string
          description: "We will need to distinguish between image of a folder, device\
            \ target, specimen, label etc)"
          example: folder
        payload_type:
          type: string
          description: "image, ct scan, surface scan, document"
          example: ct scan
        file_formats:
          type: array
          description: "File format enum, can contain multiple formats"
          items:
            type: string
            description: "File format enum, can contain multiple formats"
            enum:
            - TIF
            - JPEG
            - RAW
        asset_locked:
          type: boolean
          description: Flags if it is possible to edit / delete the media of this
            asset
          example: false
        restricted_access:
          type: array
          items:
            type: string
            enum:
            - USER
            - ADMIN
            - SERVICE_USER
            - DEVELOPER
        tags:
          type: object
          additionalProperties:
            type: string
            description: A dictionary of dynamic properties
          description: A dictionary of dynamic properties
        audited:
          type: boolean
          description: Marking if this asset has been audited atleast once
          example: true
        created_date:
          type: string
          description: Date the asset metadata was uploaded
          format: date-time
          example: 2023-05-24T00:00:00Z
        last_updated_date:
          type: string
          description: Date the asset metadata was last updated
          format: date-time
          example: 2023-05-24T00:00:00Z
        asset_taken_date:
          type: string
          description: Date the asset was taken
          format: date-time
          example: 2023-05-24T00:00:00Z
        asset_deleted_date:
          type: string
          description: Date the asset was marked as deleted in the metadata
          format: date-time
          example: 2023-05-24T00:00:00Z
        institution:
          type: string
          description: The institution
          example: NNAD
        parent_guid:
          type: string
          description: GUID of the parent asset
          example: ti-a02-202305241657
        collection:
          type: string
          description: Name of the collection the asset belongs to
          example: test-collection
        sambaInfo:
          $ref: '#/components/schemas/SambaInfo'
        internal_status:
          type: string
          description: An internal status field used to track the status of the upload
            of related media
          example: COMPLETED
          enum:
          - METADATA_RECEIVED
          - ASSET_RECEIVED
          - COMPLETED
          - SMB_ERROR
          - ERDA_ERROR
        date_asset_finalised:
          type: string
          description: Date the asset was pushed to specify
          format: date-time
          example: 2023-05-24T00:00:00Z
        digitiser:
          type: string
          description: "Username of the person that digitised the asset,"
          example: THBO
        pipeline:
          type: string
          description: The pipeline that created or updated the asset
          example: ti-p1
        workstation:
          type: string
          description: The name of the workstation that created or updated the asset
          example: ti-ws1
        updateUser:
          type: string
          description: Username of the person that updated the asset
          example: THBO
        date_metadata_taken:
          type: string
          format: date-time
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      type: object
      properties:
        user:
          type: string
        timeStamp:
          type: string
          format: date-time
        event:
          type: string
          enum:
          - CREATE_ASSET
          - UPDATE_ASSET
          - AUDIT_ASSET
          - DELETE_ASSET
          - CREATE_ASSET_METADATA
          - UPDATE_ASSET_METADATA
          - AUDIT_ASSET_METADATA
          - DELETE_ASSET_METADATA
          - METADATA_TAKEN
          - ASSET_FINALISED
        pipeline:
          type: string
        workstation:
          type: string
    SambaInfo:
      type: object
      properties:
        port:
          type: integer
          format: int32
        hostname:
          type: string
        smb_name:
          type: string
        token:
          type: string
        sambaRequestStatus:
          type: string
          enum:
          - OK_OPEN
          - OK_DISCONNECTED
          - OK_CLOSED
          - NO_PORT_AVAILABLE
          - UPSTREAM_ERROR
          - INTERNAL_ERROR
        sambaRequestStatusMessage:
          type: string
    Specimen:
      type: object
      properties:
        institution:
          type: string
        collection:
          type: string
        barcode:
          type: string
        specimen_pid:
          type: string
        preparation_type:
          type: string
    AssetUpdateRequest:
      type: object
      properties:
        shareName:
          type: string
        minimalAsset:
          $ref: '#/components/schemas/MinimalAsset'
        workstation:
          type: string
        pipeline:
          type: string
        digitiser:
          type: string
    MinimalAsset:
      type: object
      properties:
        guid:
          type: string
        parent_guid:
          type: string
    Audit:
      type: object
      properties:
        user:
          type: string
    Collection:
      type: object
      properties:
        name:
          type: string
          description: The name of the collection
          example: test-collection
        institution:
          type: string
          description: The name of the institution to which the collection belong
          example: test-institution
    Institution:
      type: object
      properties:
        name:
          type: string
          description: The institution name
          example: test-institution
    Pipeline:
      type: object
      properties:
        name:
          type: string
          description: The name of the pipeline
          example: ti-p1
        institution:
          type: string
          description: The institution that the pipeline belongs to
          example: test-institution
    PublicationLink:
      type: object
      properties:
        asset_guid:
          type: string
        link:
          type: string
        publisher_name:
          type: string
        timestamp:
          type: string
          format: date-time
    AssetSmbRequest:
      type: object
      properties:
        shareName:
          type: string
        asset:
          $ref: '#/components/schemas/MinimalAsset'
    SmbRequest:
      type: object
      properties:
        users:
          uniqueItems: true
          type: array
          items:
            type: string
        assets:
          type: array
          items:
            $ref: '#/components/schemas/MinimalAsset'
    GraphData:
      type: object
      properties:
        institutes:
          type: object
          additionalProperties:
            type: integer
            format: int32
        pipelines:
          type: object
          additionalProperties:
            type: integer
            format: int32
        workstations:
          type: object
          additionalProperties:
            type: integer
            format: int32
    StatisticsData:
      type: object
      properties:
        instituteName:
          type: string
        pipelineName:
          type: string
        workstationName:
          type: string
        createdDate:
          type: integer
          format: int64
        specimens:
          type: integer
          format: int32
    Workstation:
      type: object
      properties:
        name:
          type: string
          description: The name of the workstation
          example: ti-ws1
        status:
          type: string
          description: Status of the workstation
          example: IN_SERVICE
          enum:
          - IN_SERVICE
          - OUT_OF_SERVICE
        institution_name:
          type: string
          description: The institution that where the workstation is located
          example: test-institution
  securitySchemes:
    dassco-idp:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "${authServerUrl}/protocol/openid-connect/auth"
          tokenUrl: "${authServerUrl}/protocol/openid-connect/token"
      x-client-id: "${authClientId}"
      x-receive-token-in: request-body
