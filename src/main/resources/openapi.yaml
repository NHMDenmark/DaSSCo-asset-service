openapi: 3.0.1
info:
  title: DaSSCo
  description: |
    DaSSCO API Documentation
  version: "1.0"
servers:
- url: "${apiServerUrl}"
  variables: {}
paths:
  /v1/assets:
    get:
      operationId: getAssets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetV1'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/collections/{collectionName}/assets:
    get:
      operationId: getInstitutes
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      operationId: deleteCollection
      responses:
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/collections/{collectionName}/assets/{assetGuid}:
    get:
      operationId: getAsset
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      - name: assetGuid
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/collections:
    get:
      operationId: getInstitutes_1
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution_1
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      operationId: deleteCollection_1
      responses:
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/specimengraphinfo:
    get:
      operationId: getSpecimenData
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphData'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutes:
    get:
      operationId: getInstitutes_2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institute'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions:
    get:
      operationId: getInstitutes_3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution_2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Institution'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}:
    get:
      operationId: getInstitutes_4
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/pipelines:
    get:
      operationId: getPipelines
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createInstitution_3
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Pipeline'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/collections/{collectionName}/specimens:
    get:
      operationId: getSpecimen
      parameters:
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Specimen'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createSpecimen
      parameters:
      - name: collectionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Specimen'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specimen'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    delete:
      operationId: deleteSpecimen
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Specimen'
      responses:
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/workstations:
    get:
      operationId: getWorkstations
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
    post:
      operationId: createWorkstation
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workstation'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workstation'
        "400-599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaSSCoError'
      security:
      - dassco-idp: []
  /v1/institutions/{institutionName}/workstations/{workstationName}:
    put:
      operationId: updateWorkstation
      parameters:
      - name: institutionName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Workstation'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
      security:
      - dassco-idp: []
components:
  schemas:
    AssetV1:
      type: object
      properties:
        originalMedia:
          type: string
        originalMediaTaken:
          type: string
          format: date-time
        digitiser:
          type: string
        workstationName:
          type: string
        pipelineName:
          type: string
        institution:
          type: string
        collection:
          type: string
        dateMediaCreated:
          type: string
          format: date-time
        mediaCreatedBy:
          type: string
        dateMediaUpdated:
          type: array
          items:
            type: string
            format: date-time
        mediaUpdatedBy:
          type: array
          items:
            type: string
        dateMediaDeleted:
          type: string
        mediaDeletedBy:
          type: string
        dateMetadataCreated:
          type: string
          format: date-time
        metadataCreatedBy:
          type: array
          items:
            type: string
        dateMetadataUpdated:
          type: array
          items:
            type: string
            format: date-time
        metadataUpdatedBy:
          type: array
          items:
            type: string
        audited:
          type: string
        auditedBy:
          type: string
        auditedDate:
          type: string
          format: date-time
        status:
          type: string
        storageLocation:
          type: string
        parent:
          type: string
        originalParent:
          type: string
        relatedMedia:
          type: string
        mutispecimenStatus:
          type: string
        otherMultispecimen:
          type: string
        barcode:
          type: string
        specimenPid:
          type: string
        specifySpecimenId:
          type: string
        specifyAttachmentId:
          type: string
        mediaGuid:
          type: string
        mediaPid:
          type: string
        externalLink:
          type: string
        payloadType:
          type: string
        fileFormat:
          type: string
        fileInfo:
          type: string
        accessLevel:
          type: string
        preparationType:
          type: string
        ocrText:
          type: string
        geographicRegion:
          type: string
        taxonName:
          type: string
        typeStatus:
          type: string
        specimenStorageLocation:
          type: string
        funding:
          type: string
        copyrightOwner:
          type: string
        license:
          type: string
        embargoType:
          type: string
        embargoNotes:
          type: string
        equipmentDetails:
          type: array
          items:
            type: string
        exposureTime:
          type: string
        fNumber:
          type: string
        focalLength:
          type: string
        isoSetting:
          type: string
        whiteBalance:
          type: string
        originalSpecifyMediaName:
          type: string
        mediaSubject:
          type: string
        notes:
          type: array
          items:
            type: string
        pushAssetToSpecify:
          type: string
        pushMetadataToSpecify:
          type: string
    DaSSCoError:
      type: object
      properties:
        type:
          type: string
          enum:
          - Error
        protocolVersion:
          type: string
          enum:
          - "1.0"
        errorCode:
          type: string
          enum:
          - BAD_REQUEST
          - UPSTREAM_ERROR
          - INTERNAL_ERROR
        errorMessage:
          type: string
    Asset:
      type: object
      properties:
        pid:
          type: string
          description: ???
          example: asdf-1234-3333-1000
        guid:
          type: string
          description: Unique key for the asset?
          example: asdf1244-233-3
        status:
          type: string
          enum:
          - WORKING_COPY
          - ARCHIVE
          - BEING_PROCESSED
          - PROCESSING_HALTED
          - ISSUE_WITH_MEDIA
          - ISSUE_WITH_METADATA
          - FOR_DELETION
        multi_specimen:
          type: boolean
          description: Basically a multispecimen is a single image (or other type
            of media) that actually contains multiple specimens in it
          example: true
        specimen_barcodes:
          type: array
          description: The barcodes of associated specimens
          items:
            type: string
            description: The barcodes of associated specimens
        funding:
          type: string
          description: A short description of funding source used to create the asset
          example: Funding secured
        subject:
          type: string
          description: "We will need to distinguish between image of a folder, device\
            \ target, specimen, label etc)"
          example: folder
        payload_type:
          type: string
          description: "image, ct scan, surface scan, document"
          example: ct scan
        file_formats:
          type: array
          description: "File format enum, can contain multiple formats"
          items:
            type: string
            description: "File format enum, can contain multiple formats"
            enum:
            - TIF
            - JPEG
            - RAW
        asset_locked:
          type: boolean
          description: Flags if it is possible to edit / delete the media of this
            asset
          example: false
        restricted_access:
          type: array
          items:
            type: string
            enum:
            - USER
        tags:
          type: object
          additionalProperties:
            type: string
            description: A dictionary of dynamic properties
            example: ct scan
          description: A dictionary of dynamic properties
          example: ct scan
        audited:
          type: boolean
          description: audited
          example: false
        created_date:
          type: string
          format: date-time
        last_updated_date:
          type: string
          format: date-time
        asset_taken_date:
          type: string
          format: date-time
        asset_deleted_date:
          type: string
          format: date-time
        institution:
          type: string
          description: The institution
          example: NNAD
        parent_guid:
          type: string
        collection:
          type: string
        pipeline:
          type: string
        workstation:
          type: string
        asset_location:
          type: string
        internal_status:
          type: string
          enum:
          - METADATA_RECEIVED
          - ASSET_RECEIVED
    Collection:
      type: object
      properties:
        name:
          type: string
          description: The name of the collection
          example: Test-collection
        institution:
          type: string
          description: The name of the institution to which the collection belong
          example: NNAD
    GraphData:
      type: object
      properties:
        instituteName:
          type: string
        pipelineName:
          type: string
        workstationName:
          type: string
        createdDate:
          type: string
        specimens:
          type: integer
          format: int32
    Institute:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        name:
          type: string
        ocrText:
          type: string
        taxonName:
          type: string
        geographicRegion:
          type: string
        properties:
          type: object
          additionalProperties:
            type: object
          writeOnly: true
    Institution:
      type: object
      properties:
        name:
          type: string
          description: The institution name
          example: NNAD
    Pipeline:
      type: object
      properties:
        name:
          type: string
          description: The name of the pipeline
          example: PIP1
        institution:
          type: string
          description: The institution that the pipeline belongs to
          example: NNAD
    Specimen:
      type: object
      properties:
        institution:
          type: string
        collection:
          type: string
        barcode:
          type: string
        specimen_pid:
          type: string
        preparation_type:
          type: string
    Workstation:
      type: object
      properties:
        name:
          type: string
          description: The name of the workstation
        status:
          type: string
          description: Status of the workstation
          enum:
          - IN_SERVICE
          - OUT_OF_SERVICE
        institution_name:
          type: string
          description: The institution that where the workstation is
  securitySchemes:
    dassco-idp:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "${authServerUrl}/protocol/openid-connect/auth"
          tokenUrl: "${authServerUrl}/protocol/openid-connect/token"
      x-client-id: "${authClientId}"
      x-receive-token-in: request-body
