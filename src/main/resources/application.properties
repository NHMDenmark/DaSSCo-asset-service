# Deployment info
deploy-info.artifact=@project.artifactId@
deploy-info.version=@project.version@
deploy-info.build-time=@timestamp@

# Application health check and info
management.endpoint.health.show-details = always
management.endpoint.health.show-components = always
management.endpoints.web.exposure.include = health, info, prometheus

management.endpoint.health.status.order = fatal,down,out-of-service,unknown,up
management.endpoint.health.status.http-mapping.down = 503
management.endpoint.health.status.http-mapping.fatal = 500
management.endpoint.health.status.http-mapping.out-of-service = 410
management.endpoint.health.status.http-mapping.unknown = 420

# The property names corresponds directly to the HTTP header names, with one additional trick:
# Allow-Origin can be a comma-separated list rather than a single origin.
cors.Access-Control-Allow-Origin=${CORS_ALLOW_ORIGIN:http://localhost:4200/}
cors.Access-Control-Allow-Methods=GET, PUT, POST, DELETE, HEAD, OPTIONS
cors.Access-Control-Allow-Headers=Authorization, Accept, Origin, Content-Type, Cache-Control, If-None-Match
cors.Access-Control-Expose-Headers=Access-Control-Allow-Origin, ETag
cors.Access-Control-Max-Age=86400

# Authorization
# Using existing environment keys for compatibility
auth.keycloak.realm=${KEYCLOAK_REALM:dassco}
auth.serverRootUrl=${KEYCLOAK_AUTH_SERVER_URL:http://localhost:8083/}
auth.clientName=${KEYCLOAK_RESOURCE:dassco-asset-service}
auth.serverUrl=${auth.serverRootUrl}realms/${auth.keycloak.realm}

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${auth.serverUrl}/protocol/openid-connect/certs

frontend-properties.authenticationUrl=${LOCALHOST_KEYCLOAK: ${auth.serverUrl}}
frontend-properties.rootUrl=${ROOT_URL:http://localhost:8084/ars}
frontend-properties.fileProxyRootUrl=${FILE_PROXY_ROOT_URL:http://localhost:8080}
frontend-properties.clientId=${auth.clientName}

# Postgres datasource
datasource.jdbcUrl=${POSTGRES_URL:jdbc:postgresql://localhost:5433/dassco_file_proxy}
datasource.username=${POSTGRES_USER:dassco_file_proxy}
datasource.password=${POSTGRES_PASSWORD:dassco_file_proxy}
datasource.connectionTimeout=${POSTGRES_CONNECTION_TIMEOUT:30000}
datasource.idleTimeout=${POSTGRES_IDLE_TIMEOUT:600000}
datasource.maxLifetime=${POSTGRES_MAX_LIFETIME:1800000}
datasource.minimumIdle=${POSTGRES_MINIMUM_IDLE:2}
datasource.maximumPoolSize=${POSTGRES_MAXIMUM_POOL_SIZE:5}

datasource.readonly.jdbcUrl=${datasource.jdbcUrl}
datasource.readonly.username=${POSTGRES_READONLY_USER:readonly_user}
datasource.readonly.password=${POSTGRES_READONLY_PASSWORD:readonly_password}
spring.liquibase.parameters.readonly.database=${POSTGRES_READONLY_DATABASE:dassco_file_proxy}
spring.liquibase.parameters.readonly.username=${datasource.readonly.username}
spring.liquibase.parameters.readonly.password=${datasource.readonly.password}

# Liquibase
logging.level.liquibase=INFO
spring.liquibase.change-log=classpath:/liquibase/changelog-master.xml
spring.liquibase.enabled=true
spring.liquibase.contexts=${LIQUIBASE_CONTEXTS:default}

spring.config.import=optional:file:./application-local.properties

# dassco file proxy
fileproxy.url=${FILEPROXY_LOCATION:http://localhost:8080/file_proxy/api}
# dassco specify adapter
specify-adapter.url=${ADAPTER_LOCATION:http://localhost:8081}
fileproxy.share-creation-blocked-seconds=${SHARE_CREATION_BLOCKED_SECONDS:300}
# logging
logging.level.dk.northtech.dasscoassetservice=INFO
logging.level.org.springframework=INFO
logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file= %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%
server.port=8084

server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.basedir=target
server.tomcat.accesslog.directory=logs/
server.tomcat.accesslog.prefix=access_log
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.max-days=30
server.compression.enabled=true

amqp-config.assetQueueName=${ASSET_QUEUE:asset-queue}
amqp-config.acknowledgeQueueName=${ACKNOWLEDGE_QUEUE:acknowledge-queue}
amqp-config.host=${AMQP_HOST_NAME:localhost}
amqp-config.secure=${AMQP_SECURE:false}

keycloak.service-user.keycloakUrl=${auth.serverRootUrl}
keycloak.service-user.realm=${auth.keycloak.realm}
keycloak.service-user.clientId=${KEYCLOAK_SERVICE_USER_CLIENT_ID:rabbitmq-service-user}
keycloak.service-user.clientSecret=${KEYCLOAK_SERVICE_USER_CLIENT_SECRET:kbOFBXI9tANgKUq8vXHLhT6YhbivgXxn}

server.servlet.context-path=/ars

spring.application.name=asset-service

