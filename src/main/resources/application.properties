
# Deployment info
deploy-info.artifact=@project.artifactId@
deploy-info.version=@project.version@
deploy-info.build-time=@timestamp@

# Application health check and info
management.endpoint.health.show-details = always
management.endpoint.health.show-components = always
#management.endpoints.web.exposure.include = health, info

management.endpoint.health.status.order = fatal,down,out-of-service,unknown,up
management.endpoint.health.status.http-mapping.down = 503
management.endpoint.health.status.http-mapping.fatal = 500
management.endpoint.health.status.http-mapping.out-of-service = 410
management.endpoint.health.status.http-mapping.unknown = 420

# The property names corresponds directly to the HTTP header names, with one additional trick:
# Allow-Origin can be a comma-separated list rather than a single origin.
cors.Access-Control-Allow-Origin=${CORS_ALLOW_ORIGIN:https://climbalong.com, http://localhost:4200/}
cors.Access-Control-Allow-Methods=GET, PUT, POST, DELETE, HEAD, OPTIONS
cors.Access-Control-Allow-Headers=Authorization, Accept, Origin, Content-Type, Cache-Control, If-None-Match
cors.Access-Control-Expose-Headers=Access-Control-Allow-Origin, ETag
cors.Access-Control-Max-Age=86400

# Authorization
# Using existing environment keys for compatibility
auth.keycloak.realm=${KEYCLOAK_REALM:dassco}
auth.serverRootUrl=${KEYCLOAK_AUTH_SERVER_URL:http://localhost:8083/}
auth.clientName=${KEYCLOAK_RESOURCE:dassco-asset-service}
auth.serverUrl=${auth.serverRootUrl}realms/${auth.keycloak.realm}

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${auth.serverUrl}/protocol/openid-connect/certs

frontend-properties.authenticationUrl=${auth.serverUrl}
frontend-properties.apiUrl=${ROOT_URL:http://localhost:8080}
frontend-properties.clientId=${auth.clientName}
frontend-properties.apiUrlComp=${ROOT_URL_COMP:http://localhost:8080}
frontend-properties.apiUrlclimbalong=${ROOT_URL_CLIMBALONG:http://localhost:8080}
frontend-properties.datalakeUrl=${DATALAKE_URL:http://localhost:8080}

# Postgres datasource
datasource.jdbcUrl=${POSTGRES_URL:jdbc:postgresql://localhost:5433/dassco_asset_service}
datasource.username=${POSTGRES_USER:dassco_asset_service}
datasource.password=${POSTGRES_PASSWORD:dassco_asset_service}
datasource.connectionTimeout=${POSTGRES_CONNECTION_TIMEOUT:30000}
datasource.idleTimeout=${POSTGRES_IDLE_TIMEOUT:600000}
datasource.maxLifetime=${POSTGRES_MAX_LIFETIME:1800000}
datasource.minimumIdle=${POSTGRES_MINIMUM_IDLE:2}
datasource.maximumPoolSize=${POSTGRES_MAXIMUM_POOL_SIZE:5}

# Liquibase
logging.level.liquibase=INFO
spring.liquibase.change-log=classpath:/liquibase/changelog-master.xml
spring.liquibase.contexts=default
spring.liquibase.enabled=false

spring.config.import=optional:file:./application-local.properties

spring.application.name=DaSSCo
spring.boot.admin.client.instance.name=DaSSCo
spring.boot.admin.client.instance.service-url=http://localhost:8084
spring.boot.admin.client.url=http://localhost:8081
logging.file.name=target/sample-boot-application.log
logging.pattern.file=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx
management.endpoints.web.exposure.include = *
server.port=8084
